<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>my.b4a.randomaccess.addoAsyncStreams</name>
        <shortname>addoAsyncStreams</shortname>
        <owner>process</owner>
        <event>NewData (Buffer() As Byte)</event>
        <event>Error</event>
        <event>Terminated</event>
        <event>NewStream (Dir As String, FileName As String)</event>
        <method>
            <name>Write</name>
            <comment>Adds the given bytes array to the output stream queue.
If the object was initialized with InitializePrefix then the array length will be added before the array.
Returns False if the queue is full and it is not possible to queue the data.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>StopWithoutClosingStreams</name>
            <comment>Stops AsyncStreams without closing the underlying streams. This is useful for cases such as STARTTLS implementations.
 The underlying streams must be configured with a read timeout and ContinueAfterTimeout should be set to True.
Note that it only works in non-prefix mode.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>InitializePrefix</name>
            <comment>Initializes the object and sets it in "prefix" mode. In this mode incoming data should adhere to the following protocol:
Every message begins with the message length as an Int value (4 bytes). This length should not include the additional 4 bytes.
The NewData event will be raised only with full messages (not including the 4 bytes length value).
The prefix Int value will be added to the output messages automatically.
This makes it easier as you do not need to deal with broken messages.
In - The InputStream that will be read. Pass Null if you only want to write with this object.
BigEndian - Whether the length value is encoded in BigEndian or LittleEndian. 
Out - The OutputStream that is used for writing the data. Pass Null if you only want to read with this object.
EventName - Determines the Subs that handle the NewData and Error events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>BigEndian</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SendAllAndClose</name>
            <comment>Sends a message to the internal queue. AsyncStreams will be closed when the message is processed.
The Terminated event will be raised.
Returns False if the queue is full or the connection is not open.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>WriteStream</name>
            <comment>Writes the given stream. This method is only supported in prefix mode.
The checksum will be calculated and sent to the other size. The NewStream event will be raised, in the receiving side, after the stream was received successfully.
This method is more efficient than sending the same data in chunks. It can handle streams of any size.
In - InputStream that will be read. Note that the InputStream will be closed after the stream is sent.
Size - Number of bytes to read from the stream.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Size</name>
                <type>java.lang.Long</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the associated streams.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment>Tests whether this object has been initialized.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object. Unlike in prefix mode, the NewData event will be raised with new data as soon as it is available.
In - The InputStream that will be read. Pass Null if you only want to write with this object.
Out - The OutputStream that is used for writing the data. Pass Null if you only want to read with this object.
EventName - Determines the Subs that handle the NewData and Error events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Write2</name>
            <comment>Adds the given bytes array to the output stream queue.
If the object was initialized with InitializePrefix then the array length will be added before the array.
Returns False if the queue is full and it is not possible to queue the data.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>StreamTotal</name>
            <returntype>long</returntype>
            <comment>Returns the total number of bytes of the currently received file. Only valid in prefix mode.</comment>
        </property>
        <property>
            <name>StreamReceived</name>
            <returntype>long</returntype>
            <comment>Returns the number of bytes of the currently received file. Only valid in prefix mode.</comment>
        </property>
        <property>
            <name>OutputQueueSize</name>
            <returntype>int</returntype>
            <comment>Returns the number of messages waiting in the output queue.</comment>
        </property>
        <field>
            <name>ContinueAfterTimeout</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>StreamFolder</name>
            <comment>Received streams will be saved in this folder.</comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>my.b4a.randomaccess.CompressedStreams</name>
        <shortname>CompressedStreams</shortname>
        <comment>CompressedStreams object allows you to compress and decompress data using gzip or zlib compression methods.
There are two options for working with CompressedStreams:
Wrapping another stream by calling WrapInputStream or WrapOutputStream.
Compressing or decompressing the data in memory.
The following example demonstrates the usage of this object:&lt;code&gt;
Sub Globals

End Sub

Sub Activity_Create(FirstTime As Boolean)
	Dim sb As StringBuilder
	sb.Initialize
	'Concatenation operations are much faster with StringBuilder than with String.
	For i = 1 To 10000
		sb.Append("Playing with compressed streams.").Append(CRLF)
	Next
	Dim out As OutputStream
	Dim s As String
	Dim compress As CompressedStreams
	s = sb.ToString
	'Write the string without compressing it (we could have used File.WriteString instead).
	out = File.OpenOutput(File.DirTemp, "test.txt", False)
	WriteStringToStream(out, s)
	
	'Write the string with gzip compression.
	out = File.OpenOutput(File.DirTemp, "test.gz", False)
	out = compress.WrapOutputStream(out, "gzip")
	WriteStringToStream(out, s)
	
	'Write the string with zlib compression
	out = File.OpenOutput(File.DirTemp, "test.zlib", False)
	out = compress.WrapOutputStream(out, "zlib")
	WriteStringToStream(out, s)
	
	'Show the files sizes
	Msgbox("No compression: " &amp; File.Size(File.DirTemp, "test.txt") &amp; CRLF _
		&amp; "Gzip: " &amp; File.Size(File.DirTemp, "test.gz") &amp; CRLF _
		&amp; "zlib: " &amp; File.Size(File.DirTemp, "test.zlib"), "Files sizes")

	'Read data from a compressed file
	Dim in As InputStream
	in = File.OpenInput(File.DirTemp, "test.zlib")
	in = compress.WrapInputStream(in, "zlib")
	Dim reader As TextReader
	reader.Initialize(in)
	Dim line As String
	line = reader.ReadLine
	Msgbox(line, "First line")
	reader.Close
	
	'In memory compression / decompression
	Dim data() As Byte
	data = "Playing with in-memory compression.".GetBytes("UTF8")
	Dim compressed(), decompressed() As Byte
	compressed = compress.CompressBytes(data, "gzip")
	decompressed = compress.DecompressBytes(compressed, "gzip")
	'In this case the compressed data is longer than the decompressed data.
	'The data is too short for the compression to be useful.
	Log("Compressed: " &amp; compressed.Length) 
	Log("Decompressed: " &amp; decompressed.Length)
	Msgbox(BytesToString(decompressed,0, decompressed.Length, "UTF8"), "")
End Sub
Sub WriteStringToStream(Out As OutputStream, s As String)
	Dim t As TextWriter
	t.Initialize(Out)
	t.Write(s)
	t.Close 'Closes the internal stream as well
End Sub&lt;/code&gt;</comment>
        <owner>process</owner>
        <method>
            <name>WrapOutputStream</name>
            <comment>Wraps an output streams and returns an output stream that automatically compresses the data when it is written to the stream.
Out - The original output stream.
CompressMethod - The name of the compression method (gzip or zlib).</comment>
            <returntype>anywheresoftware.b4a.objects.streams.File.OutputStreamWrapper</returntype>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DecompressBytes</name>
            <comment>Returns a byte array with the decompressed data.
CompressedData - The compressed data that should be decompressed.
CompressMethod - The name of the compression method (gzip or zlib).</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>CompressedData</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CompressBytes</name>
            <comment>Returns a byte array with the compressed data.
Data - Data to compress.
CompressMethod - The name of the compression method (gzip or zlib).</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WrapInputStream</name>
            <comment>Wraps an input stream and returns an input stream that automatically decompresses the stream when it is read.
In - The original input stream.
CompressMethod - The name of the compression method (gzip or zlib).</comment>
            <returntype>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</returntype>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>my.b4a.randomaccess.CountingStreams.CountingInput</name>
        <shortname>CountingInputStream</shortname>
        <comment>CountingInputStream and CountingOutputStream allow you to monitor the reading or writing progress.
Counting streams wrap the actual stream and provide a Count property which allows you to get the number of bytes read or written.
Counting streams are useful when the reading or writing operations are done in the background. You can then use a timer to monitor the progress.
This example logs the downloading progress:
&lt;code&gt;
Sub Process_Globals
	Dim hc As HttpClient
	Dim cout As CountingOutputStream
	Dim length As Int
	Dim timer1 As Timer
End Sub
Sub Globals

End Sub
Sub Activity_Create(FirstTime As Boolean)
	If FirstTime Then
		hc.Initialize("hc")
		timer1.Initialize("Timer1", 500)
	End If
	Dim req As HttpRequest
	req.InitializeGet("http://www.basic4ppc.com/android/files/b4a-trial.zip")
	hc.Execute(req, 1)
End Sub

Sub hc_ResponseSuccess (Response As HttpResponse, TaskId As Int)
	cout.Initialize(File.OpenOutput(File.DirRootExternal, "1.zip", False))
	Timer1.Enabled = True
	length = Response.ContentLength
	Response.GetAsynchronously("response", cOut, True, TaskId)
End Sub

Sub hc_ResponseError (Response As HttpResponse, Reason As String, StatusCode As Int, TaskId As Int)
	Log("Error: " &amp; Reason)
	If Response &lt;&gt; Null Then
		Log(Response.GetString("UTF8"))
		Response.Release
	End If
End Sub

Sub Response_StreamFinish (Success As Boolean, TaskId As Int)
	timer1.Enabled = False
	If Success Then
		Timer1_Tick 'Show the current counter status
		Log("Success!")
	Else
		Log("Error: " &amp; LastException.Message)
	End If
End Sub

Sub Timer1_Tick
	Log(cout.Count &amp; " out of " &amp; length)
End Sub&lt;/code&gt;</comment>
        <objectwrapper>java.io.InputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>ReadBytes</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the counting stream by wrapping the given input stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>BytesAvailable</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Count</name>
            <returntype>long</returntype>
            <parameter>
                <name>v</name>
                <type>long</type>
            </parameter>
            <comment>Gets or sets the number of bytes read.</comment>
        </property>
    </class>
    <class>
        <name>my.b4a.randomaccess.CountingStreams.CountingOutput</name>
        <shortname>CountingOutputStream</shortname>
        <comment>See CountingInputStream for more information.</comment>
        <objectwrapper>java.io.OutputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Flush</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the counting stream by wrapping the given output stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>ToBytesArray</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Count</name>
            <returntype>long</returntype>
            <parameter>
                <name>v</name>
                <type>long</type>
            </parameter>
            <comment>Gets or sets the number of bytes written.</comment>
        </property>
    </class>
    <version>1.0</version>
</root>
